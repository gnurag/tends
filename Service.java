/***************************************************************************
 *            Service.java
 *
 *  Tue Jul 22 16:00:54 2003
 *  Copyright  2003  anu
 *  anu@localhost.localdomain
 ****************************************************************************/
/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


import java.awt.*;
import java.awt.event.*;
import java.awt.datatransfer.*;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.Document;

import java.awt.image.*;
import com.sun.image.codec.jpeg.*;

import java.io.*;
import java.util.*;
import java.util.zip.*;
import java.net.*;

public class Service
{
	static JTextArea logarea;
	public static void main(String[] args) 
	{
		System.out.println("My main() provides no Service...\nUse me with TENDS");
	}

	//Saves the setting into the ini file
	public static boolean saveSetting(String key,String value)
	{
		String settingsfile=System.getProperty("user.home")+"/.tends";
		String message="TENDS Configuration file\r\n\r\n###    DO NOT EDIT THIS FILE     ###";
		boolean answer;
		Properties p=new Properties();
		try
		{
			RandomAccessFile raf=new RandomAccessFile(settingsfile,"rw");
			raf.close();
			FileInputStream fis=new FileInputStream(settingsfile);
			p.load(fis);
			fis.close();
			p.setProperty(key,value);

			FileOutputStream out=new FileOutputStream(settingsfile);
			p.store(out,message);
			out.close();
			answer=true;
		}
		catch(Exception e){answer=false;}
		return answer;
	}
	//Old getSetting method for backward compatibility;
	public static String getSetting(String key)
	{
		return getSetting(key,"");
	}
	// Get setting from the ini file
	public static String getSetting(String key,String preset)
	{
		String settingsfile=System.getProperty("user.home")+"/.tends";
		String answer=preset;
		Properties p=new Properties();
		try
		{
			RandomAccessFile raf=new RandomAccessFile(settingsfile,"rw");
			raf.close();
			FileInputStream in=new FileInputStream(settingsfile);
			p.load(in);
			in.close();
			answer=p.getProperty(key,preset);
		}
		catch(Exception e){answer=preset;}
		return answer;
	}

	public static String decrypt(String s)
    {
		String key="BF147CA0526E83D9";
        StringBuffer stringbuffer = new StringBuffer();
        for(int i = 0; i < s.length(); i += 2)
            stringbuffer.append((char)(key.indexOf(s.charAt(i + 1)) * 16 + "BF147CA0526E83D9".indexOf(s.charAt(i)) ^ 0xa7));
        return stringbuffer.toString();
    }

    public static String encrypt(String s)
    {
		String key="BF147CA0526E83D9";
        StringBuffer stringbuffer = new StringBuffer();
        for(int i = 0; i < s.length(); i++)
        {
            int j = (s.charAt(i) ^ 0xa7) & 0xff;
            stringbuffer.append(key.charAt(j & 0xf));
            stringbuffer.append(key.charAt(j >> 4 & 0xf));
        }
        return stringbuffer.toString();
    }

 	public static boolean captureScreen(String filename,Frame frame)
	{
		boolean success=false;
		JLabel lbl=new JLabel("Take a Screen shot after (seconds)");
		JLabel imglbl=new JLabel("Select type of Image");
		JSlider SliderPort=new JSlider(0,15,5);
		SliderPort.setEnabled(true);
 		SliderPort.setMajorTickSpacing(5);
 		SliderPort.setMinorTickSpacing(1);
 		SliderPort.setPaintLabels(true);
 		SliderPort.setSnapToTicks(true);

		Object[] shot=new Object[2];
		shot[0]=lbl;
		shot[1]=SliderPort;
		String[] options={"Capture","Cancel"};
		int result = JOptionPane.showOptionDialog(frame,shot,"Take Screenshot",
		JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE,null,
		options,options[0]);

		if (result==0)
		{
		int interval=SliderPort.getValue();
		try
		{
		Robot r=new Robot();
		r.delay(interval*1000);
		Dimension d= Toolkit.getDefaultToolkit().getScreenSize();
		BufferedImage bi=r.createScreenCapture(new Rectangle(d.width-1,d.height-1));
		JPEGImageEncoder jp=JPEGCodec.createJPEGEncoder(new FileOutputStream(filename));
		jp.encode(bi);
		success=true;
		}
		catch(Exception e)
		{
			showException(frame,"Cannot take Screenshot",e);
			success=false;
		}
		}
		return success;
	}

	public static void showException(Frame frame,String msg,Exception e)
	{
		TENDS.logs+="### ERROR : "+msg+"\n"+String.valueOf(e)+"\n";
		Object[] options={"Dismiss","View log"};
		int choice=JOptionPane.showOptionDialog(frame,msg,"Warning", 
			JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE,
				null, options, options[0]);
		if(choice==0) return;
		if(choice==1)
			viewLogs();
	}
	public static String searchFile()
	{
		String fileType,directory=System.getProperty("user.dir");
		Vector searchFiles = new Vector();

		//Making the GUI to get the input
		JLabel jlTitle=new JLabel("Search For a File");
		String ex[]={".txt",".java",".html",".jpg",".gif",".png",".rtf"};
		JComboBox combo=new JComboBox(ex);
		combo.setEditable(true);
		JLabel jlDir=new JLabel("Where to search for files ?? ");
		JTextField tfDir=new JTextField(directory);

		Object[] SearchFile=new Object[4];
		SearchFile[0]=jlTitle;
		SearchFile[1]=combo;
		SearchFile[2]=jlDir;
		SearchFile[3]=tfDir;

		String[] options={"Search","Cancel"};
		int result = JOptionPane.showOptionDialog(null,SearchFile,"Search for Files",
		JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE,null,
		options,options[0]);

		if(result==0)
		{
			fileType=combo.getSelectedItem().toString();
			directory=tfDir.getText();
			//Now searching for files
			 if(fileType.length()!=0 && directory.length()!=0)
			 {
				scanFiles(new File(directory),searchFiles,fileType);
			 }
			 else
			 {
				JOptionPane.showMessageDialog(null,"ERROR : Fields cannot be left empty","Error",JOptionPane.WARNING_MESSAGE);
				return(".");
			 }
			 Enumeration en = searchFiles.elements();
			 int ee=10000000;
		  try{
			 String files[]=new String[ee];
			 for(int f=0;en.hasMoreElements();f++)
			 {
				files[f]=(String)en.nextElement();
			 }
			//Showing Searched files...

			String[] possibleValues=new String[500];
			for(int no=0; no<(500); no++)
			{
				possibleValues[no]=files[no];
			}
			String selectedValue =String.valueOf(JOptionPane.showInputDialog(null, 
					"Choose one file to open", "Search Results",
						JOptionPane.INFORMATION_MESSAGE, null,
							possibleValues, possibleValues[0]));
			if(selectedValue.length()!=0)
			{
				return (selectedValue.toString());
			}
			}
			catch(Exception e)
		 	{
				Object[] opt={"OK"};
				int choice=JOptionPane.showOptionDialog(null,"Error showing list","Warning", 
				JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
				null, opt, opt[0]);
			}
		 //end showing
		 }
		else return".";
		return ".";
	}

    public static void scanFiles(File f, Vector htmlList, String fileExtn)
	{
         if (f.isDirectory())
		 {
		     String[] list = f.list();
	         if (list != null)
			 {
	             for (int i = 0; i < list.length; i++)
				 {
		             scanFiles(new File(f, list[i]), htmlList,fileExtn);
		         }
		      }
         }
	     else
		 {
            if (f.getName().toLowerCase().endsWith(fileExtn))
			{
               htmlList.addElement(f.getAbsolutePath());
            }
	     }
	}
	public static void viewLogs()
	{
		JTextArea logarea=new JTextArea(20,50);
		JFrame frame=new JFrame("TENDS Activity Log");
		JScrollPane	scroller=new JScrollPane(logarea,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		logarea.setText(TENDS.logs);
		logarea.setEditable(false);

		frame.getContentPane().add(scroller);
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		frame.setSize(screenSize.width/2,screenSize.height/2+100);
		int x=((screenSize.width)-(screenSize.width/2))/2;
		int y=((screenSize.height)-(screenSize.height/2))/2;
		frame.setLocation(x,y);

		frame.setIconImage((new ImageIcon("images/icon.gif")).getImage());
		frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		frame.setResizable(false);
		frame.setVisible(true);
		frame.show();
	}

 ///////////////////  DEPRECATED  ////////////////////
/// THESE ARE THE OLDER METHODS OF SAVING SETTINGS  ///
 /////////////////////////////////////////////////////
	public boolean saveSettingOld(String key,String value)
	{
		String userhome=System.getProperty("user.home");
		String data="";
		data = prepareData(getSetting("ALL"),key)  +key+"="+value;
		try
		{
			File f=new File(userhome+"/.tends");
			f.delete();
			RandomAccessFile raf=new RandomAccessFile(userhome+"/.tends","rw");
			raf.seek(raf.length());
			raf.writeBytes(data);
			raf.close();
		}
		catch(Exception ee){}
		return true;
	}
	public String getSettingOld(String key)
	{
		String allSettings="",setting=null;
		String userhome=System.getProperty("user.home");
		try
		{
			RandomAccessFile raf=new RandomAccessFile(userhome+"/.tends","rw");
			raf.close();
			FileInputStream fis=new FileInputStream(userhome+"/.tends");
			int nob=fis.available();
			byte b[]=new byte[nob];
			fis.read(b,0,nob);
			fis.close();
			allSettings=new String(b);
			if(key.equalsIgnoreCase("ALL"))
			{
				if(allSettings.length()==0)
					setting="Version="+TENDS.version;
				else
					setting=allSettings;
			}
			else
				setting=parseSetting(allSettings,key);
		}
		catch(Exception ee){}
		return setting;
	}
	String parseSetting(String data,String key)
	{
		String settingpair="",answer="";
		StringTokenizer tokens=new StringTokenizer(data);
		while(tokens.hasMoreTokens())
		{
			settingpair=tokens.nextToken();
			settingpair=settingpair.toLowerCase();
			key=key.toLowerCase();
			if(settingpair.startsWith(key))
			{
				int index=settingpair.indexOf("=");
				answer=settingpair.substring(index+1);
				break;
			}
		}
		return answer;
	}
	String prepareData(String data,String key)
	{
		String settingpair="",answer="";
		StringTokenizer tokens=new StringTokenizer(data);
		while(tokens.hasMoreTokens())
		{
			settingpair=tokens.nextToken();
			settingpair=settingpair.toLowerCase();
			key=key.toLowerCase();
			if(settingpair.startsWith(key))
				answer=answer;
			else
				answer=answer+settingpair+"\n";
		}
		return answer;
	}
}
